Lesson: AlgorithmsThe polymorphic algorithms described here are pieces of reusable functionality provided by the Java platform. All of them come from the Collections class, and all take the form of static methods whose first argument is the collection on which the operation is to be performed. The great majority of the algorithms provided by the Java platform operate on List instances, but a few of them operate on arbitrary Collection instances. This section briefly describes the following algorithms:SortingShufflingRoutine Data ManipulationSearchingCompositionFinding Extreme Values
SortingThe sort algorithm reorders a List so that its elements are in ascending order according to an ordering relationship. Two forms of the operation are provided. The simple form takes a List and sorts it according to its elements' natural ordering. If you're unfamiliar with the concept of natural ordering, read the Object Ordering section.The sort operation uses a slightly optimized merge sort algorithm that is fast and stable:Fast: It is guaranteed to run in n log(n) time and runs substantially faster on nearly sorted lists. Empirical tests showed it to be as fast as a highly optimized quicksort. A quicksort is generally considered to be faster than a merge sort but isn't stable and doesn't guarantee n log(n) performance.Stable: It doesn't reorder equal elements. This is important if you sort the same list repeatedly on different attributes. If a user of a mail program sorts the inbox by mailing date and then sorts it by sender, the user naturally expects that the now-contiguous list of messages from a given sender will (still) be sorted by mailing date. This is guaranteed only if the second sort was stable.The following trivial program prints out its arguments in lexicographic (alphabetical) order.import java.util.*;public class Sort {    public static void main(String[] args) {        List<String> list = Arrays.asList(args);        Collections.sort(list);        System.out.println(list);    }}Let's run the program.% java Sort i walk the lineThe following output is produced.[i, line, the, walk]The program was included only to show you that algorithms really are as easy to use as they appear to be.The second form of sort takes a Comparator in addition to a List and sorts the elements with the Comparator. Suppose you want to print out the anagram groups from our earlier example in reverse order of size — largest anagram group first. The example that follows shows you how to achieve this with the help of the second form of the sort method.Recall that the anagram groups are stored as values in a Map, in the form of List instances. The revised printing code iterates through the Map's values view, putting every List that passes the minimum-size test into a List of Lists. Then the code sorts this List, using a Comparator that expects List instances, and implements reverse size-ordering. Finally, the code iterates through the sorted List, printing its elements (the anagram groups). The following code replaces the printing code at the end of the main method in the Anagrams example.// Make a List of all anagram groups above size threshold.List<List<String>> winners = new ArrayList<List<String>>();for (List<String> l : m.values())    if (l.size() >= minGroupSize)        winners.add(l);// Sort anagram groups according to sizeCollections.sort(winners, new Comparator<List<String>>() {    public int compare(List<String> o1, List<String> o2) {        return o2.size() - o1.size();    }});// Print anagram groups.for (List<String> l : winners)    System.out.println(l.size() + ": " + l);Running the program on the same dictionary as in The Map Interface section, with the same minimum anagram group size (eight), produces the following output.12: [apers, apres, asper, pares, parse, pears, prase,       presa, rapes, reaps, spare, spear]11: [alerts, alters, artels, estral, laster, ratels,       salter, slater, staler, stelar, talers]10: [least, setal, slate, stale, steal, stela, taels,       tales, teals, tesla]9: [estrin, inerts, insert, inters, niters, nitres,       sinter, triens, trines]9: [capers, crapes, escarp, pacers, parsec, recaps,       scrape, secpar, spacer]9: [palest, palets, pastel, petals, plates, pleats,       septal, staple, tepals]9: [anestri, antsier, nastier, ratines, retains, retinas,       retsina, stainer, stearin]8: [lapse, leaps, pales, peals, pleas, salep, sepal, spale]8: [aspers, parses, passer, prases, repass, spares,       sparse, spears]8: [enters, nester, renest, rentes, resent, tenser,       ternes,��treens]8: [arles, earls, lares, laser, lears, rales, reals, seral]8: [earings, erasing, gainers, reagins, regains, reginas,       searing, seringa]8: [peris, piers, pries, prise, ripes, speir, spier, spire]8: [ates, east, eats, etas, sate, seat, seta, teas]8: [carets, cartes, caster, caters, crates, reacts,       recast,��traces]
ShufflingThe shuffle algorithm does the opposite of what sort does, destroying any trace of order that may have been present in a List. That is, this algorithm reorders the List based on input from a source of randomness such that all possible permutations occur with equal likelihood, assuming a fair source of randomness. This algorithm is useful in implementing games of chance. For example, it could be used to shuffle a List of Card objects representing a deck. Also, it's useful for generating test cases.This operation has two forms: one takes a List and uses a default source of randomness, and the other requires the caller to provide a Random object to use as a source of randomness. The code for this algorithm is used as an example in the List section. 
Routine Data ManipulationThe Collections class provides five algorithms for doing routine data manipulation on List objects, all of which are pretty straightforward:reverse — reverses the order of the elements in a List.fill — overwrites every element in a List with the specified value. This operation is useful for reinitializing a List.copy — takes two arguments, a destination List and a source List, and copies the elements of the source into the destination, overwriting its contents. The destination List must be at least as long as the source. If it is longer, the remaining elements in the destination List are unaffected.swap — swaps the elements at the specified positions in a List.addAll — adds all the specified elements to a Collection. The elements to be added may be specified individually or as an array.
SearchingThe binarySearch algorithm searches for a specified element in a sorted List. This algorithm has two forms. The first takes a List and an element to search for (the "search key"). This form assumes that the List is sorted in ascending order according to the natural ordering of its elements. The second form takes a Comparator in addition to the List and the search key, and assumes that the List is sorted into ascending order according to the specified Comparator. The sort algorithm can be used to sort the List prior to calling binarySearch.The return value is the same for both forms. If the List contains the search key, its index is returned. If not, the return value is (-(insertion point) - 1), where the insertion point is the point at which the value would be inserted into the List, or the index of the first element greater than the value or list.size() if all elements in the List are less than the specified value. This admittedly ugly formula guarantees that the return value will be >= 0 if and only if the search key is found. It's basically a hack to combine a boolean (found) and an integer (index) into a single int return value.The following idiom, usable with both forms of the binarySearch operation, looks for the specified search key and inserts it at the appropriate position if it's not already present.int pos = Collections.binarySearch(list, key);if (pos < 0)   l.add(-pos-1, key);
CompositionThe frequency and disjoint algorithms test some aspect of the composition of one or more Collections:frequency — counts the number of times the specified element occurs in the specified collectiondisjoint — determines whether two Collections are disjoint; that is, whether they contain no elements in common
Finding Extreme ValuesThe min and the max algorithms return, respectively, the minimum and maximum element contained in a specified Collection. Both of these operations come in two forms. The simple form takes only a Collection and returns the minimum (or maximum) element according to the elements' natural ordering. The second form takes a Comparator in addition to the Collection and returns the minimum (or maximum) element according to the specified Comparator.« Previous        •        Trail        •        Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Previous Lesson        Next page: Custom Collection Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Lesson: Custom Collection ImplementationsMany programmers will never need to implement their own Collections classes. You can go pretty far using the implementations described in the preceding sections of this chapter. However, someday you might want to write your own implementation. It is fairly easy to do this with the aid of the abstract implementations provided by the Java platform. Before we discuss how to write an implementation, let's discuss why you might want to write one.
Reasons to Write an ImplementationThe following list illustrates the sort of custom Collections you might want to implement. It is not intended to be exhaustive:Persistent: All of the built-in Collection implementations reside in main memory and vanish when the program exits. If you want a collection that will still be present the next time the program starts, you can implement it by building a veneer over an external database. Such a collection might be concurrently accessible by multiple programs.Application-specific: This is a very broad category. One example is an unmodifiable Map containing real-time telemetry data. The keys could represent locations, and the values could be read from sensors at these locations in response to the get operation.High-performance, special-purpose: Many data structures take advantage of restricted usage to offer better performance than is possible with general-purpose implementations. For instance, consider a List containing long runs of identical element values. Such lists, which occur frequently in text processing, can be run-length encoded — runs can be represented as a single object containing the repeated element and the number of consecutive repetitions. This example is interesting because it trades off two aspects of performance: It requires less space but more time than an ArrayList.High-performance, general-purpose: The Java Collections Framework's designers tried to provide the best general-purpose implementations for each interface, but many, many data structures could have been used, and new ones are invented every day. Maybe you can come up with something faster!Enhanced functionality: Suppose you need an efficient bag implementation (also known as a multiset): a Collection that offers constant-time containment checks while allowing duplicate elements. It's reasonably straightforward to implement such a collection atop a HashMap.Convenience: You may want additional implementations that offer conveniences beyond those offered by the Java platform. For instance, you may frequently need List instances representing a contiguous range of Integers.Adapter: Suppose you are using a legacy API that has its own ad hoc collections' API. You can write an adapter implementation that permits these collections to operate in the Java Collections Framework. An adapter implementation is a thin veneer that wraps objects of one type and makes them behave like objects of another type by translating operations on the latter type into operations on the former.
How to Write a Custom ImplementationWriting a custom implementation is surprisingly easy. The Java Collections Framework provides abstract implementations designed expressly to facilitate custom implementations. We'll start with the following example of an implementation of Arrays.asList.public static <T> List<T> asList(T[] a) {    return new MyArrayList<T>(a);}private static class MyArrayList<T> extends AbstractList<T> {    private final T[] a;    MyArrayList(T[] array) {        a = array;    }    public T get(int index) {        return a[index];    }    public T set(int index, T element) {        T oldValue = a[index];        a[index] = element;        return oldValue;    }    public int size() {        return a.length;    }}Believe it or not, this is very close to the implementation that is contained in java.util.Arrays. It's that simple! You provide a constructor and the get, set, and size methods, and AbstractList does all the rest. You get the ListIterator, bulk operations, search operations, hash code computation, comparison, and string representation for free.Suppose you want to make the implementation a bit faster. The API documentation for abstract implementations describes precisely how each method is implemented, so you'll know which methods to override to get the performance you want. The preceding implementation's performance is fine, but it can be improved a bit. In particular, the toArray method iterates over the List, copying one element at a time. Given the internal representation, it's a lot faster and more sensible just to clone the array.public Object[] toArray() {    return (Object[]) a.clone();}With the addition of this override and a few more like it, this implementation is exactly the one found in java.util.Arrays. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.The following list summarizes the abstract implementations:AbstractCollection — a Collection that is neither a Set nor a List. At a minimum, you must provide the iterator and the size methods.AbstractSet — a Set; use is identical to AbstractCollection.AbstractList — a List backed up by a random-access data store, such as an array. At a minimum, you must provide the positional access methods (get and, optionally, set, remove, and add) and the size method. The abstract class takes care of listIterator (and iterator).AbstractSequentialList — a List backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the listIterator and size methods. The abstract class takes care of the positional access methods. (This is the opposite of AbstractList.)AbstractQueue — at a minimum, you must provide the offer, peek, poll, and size methods and an iterator supporting remove.AbstractMap — a Map. At a minimum you must provide the entrySet view. This is typically implemented with the AbstractSet class. If the Map is modifiable, you must also provide the put method.The process of writing a custom implementation follows:Choose the appropriate abstract implementation class from the preceding list.Provide implementations for all the abstract methods of the class. If your custom collection is to be modifiable, you will have to override one or more of the concrete methods as well. The API documentation for the abstract implementation class will tell you which methods to override.Test and, if necessary, debug the implementation. You now have a working custom collection implementation.If you are concerned about performance, read the API documentation of the abstract implementation class for all the methods whose implementations you're inheriting. If any seem too slow, override them. If you override any methods, be sure to measure the performance of the method before and after the override. How much effort you put into tweaking performance should be a function of how much use the implementation will get and how critical to performance its use is. (Often this step is best omitted.)« Previous        •        Trail        •        Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Previous Lesson        Next page: Interoperability     Start SiteCatalyst code  End SiteCatalyst code 
Convenience ImplementationsThis section describes several mini-implementations that can be more convenient and more efficient than general-purpose implementations when you don't need their full power. All the implementations in this section are made available via static factory methods rather than public classes.
List View of an ArrayThe Arrays.asList method returns a List view of its array argument. Changes to the List write through to the array and vice versa. The size of the collection is that of the array and cannot be changed. If the add or the remove method is called on the List, an UnsupportedOperationException will result.The normal use of this implementation is as a bridge between array-based and collection-based APIs. It allows you to pass an array to a method expecting a Collection or a List. However, this implementation also has another use. If you need a fixed-size List, it's more efficient than any general-purpose List implementation. This is the idiom.List<String> list = Arrays.asList(new String[size]);Note that a reference to the backing array is not retained.
Immutable Multiple-Copy ListOccasionally you'll need an immutable List consisting of multiple copies of the same element. The Collections.nCopies method returns such a list. This implementation has two main uses. The first is to initialize a newly created List; for example, suppose you want an ArrayList initially consisting of 1,000 null elements. The following incantation does the trick.List<Type> list = new ArrayList<Type>(Collections.nCopies(1000, (Type)null);Of course, the initial value of each element need not be null. The second main use is to grow an existing List. For example, suppose you want to add 69 copies of the string "fruit bat" to the end of a List<String>. It's not clear why you'd want to do such a thing, but let's just suppose you did. The following is how you'd do it.lovablePets.addAll(Collections.nCopies(69, "fruit bat"));By using the form of addAll that takes both an index and a Collection, you can add the new elements to the middle of a List instead of to the end of it.
Immutable Singleton SetSometimes you'll need an immutable singletonSet, which consists of a single, specified element. The Collections.singleton method returns such a Set. One use of this implementation is to remove all occurrences of a specified element from a Collection.c.removeAll(Collections.singleton(e));A related idiom removes all elements that map to a specified value from a Map. For example, suppose you have a Map — job — that maps people to their line of work and suppose you want to eliminate all the lawyers. The following one-liner will do the deed.job.values().removeAll(Collections.singleton(LAWYER));One more use of this implementation is to provide a single input value to a method that is written to accept a collection of values.
Empty Set, List, and Map ConstantsThe Collections class provides methods to return the empty Set, List, and Map — emptySet, emptyList, and emptyMap. The main use of these constants is as input to methods that take a Collection of values when you don't want to provide any values at all, as in this example.tourist.declarePurchases(Collections.emptySet());« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Wrapper Implementations        Next page: Summary of Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Deque ImplementationsThe Deque interface, pronounced as "deck", represents a double-ended queue. The Deque interface can be implemented as various types of Collections. The Deque interface implementations are grouped into general-purpose and concurrent implementations.
General-Purpose Deque ImplementationsThe general-purpose implementations include  LinkedList and ArrayDeque classes. The Deque interface supports insertion, removal and retrieval of elements at both ends. The ArrayDeque class is the resizable array implementation of the Deque interface, whereas the LinkedList class is the list implementation. The  basic  insertion, removal and retieval operations in the Deque interface addFirst, addLast, removeFirst, removeLast, getFirst and getLast. The method addFirst adds an element at the head  whereas addLast adds an element at the tail of the Deque instance.The LinkedList implementation is more flexible than the ArrayDeque implementation. LinkedList implements all optional list operations. null elements are allowed in the LinkedList implementation but not in the ArrayDeque implementation.In terms of efficiency, ArrayDeque is more efficient than the LinkedList for add and remove operation at both ends. The best operation in a LinkedList implementation is removing  the current element during the iteration. LinkedList implementations are not ideal structures to iterate.The LinkedList implementation consumes more memory than the ArrayDeque implementation.  For the ArrayDeque instance traversal use any of the following:  foreachThe foreach is fast and can be used for all kinds of lists.ArrayDeque<String> aDeque = new ArrayDeque<String>();. . .for (String str : aDeque) {    System.out.println(str);}IteratorThe Iterator can be used for the forward traversal on all kinds of lists for all kinds of data.ArrayDeque<String> aDeque = new ArrayDeque<String>();. . .for (Iterator<String> iter = aDeque.iterator(); iter.hasNext();  ) {    System.out.println(iter.next());}The ArrayDeque class is used in this tutorial to implement the Deque interface. The complete code of the example used in this tutorial is available in ArrayDequeSample. Both the  LinkedList and ArrayDeque classes do not support concurrent access by multiple threads. 
Concurrent Deque ImplementationsTheLinkedBlockingDeque class is the concurrent implementation of the Deque interface. If the deque is empty then methods such as takeFirst and takeLast wait  until the element becomes available, and then retrieves and removes the same element. « Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Queue Implementations        Next page: Wrapper Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Lesson: ImplementationsImplementations are the data objects used to store collections, which implement the interfaces described in the Interfaces section. This lesson describes the following kinds of implementations:General-purpose implementations are the most commonly used implementations, designed for everyday use. They are summarized in the table titled General-purpose-implementations.Special-purpose implementations are designed for use in special situations and display nonstandard performance characteristics, usage restrictions, or behavior.Concurrent implementations are designed to support high concurrency, typically at the expense of single-threaded performance. These implementations are part of the java.util.concurrent package.Wrapper implementations are used in combination with other types of implementations, often the general-purpose ones, to provide added or restricted functionality.Convenience implementations are mini-implementations, typically made available via static factory methods, that provide convenient, efficient alternatives to general-purpose implementations for special collections (for example, singleton sets).Abstract implementations are skeletal implementations that facilitate the construction of custom implementations — described later in the Custom Collection Implementations section. An advanced topic, it's not particularly difficult, but relatively few people will need to do it.The general-purpose implementations are summarized in the following table.General-purpose ImplementationsInterfacesHash table ImplementationsResizable array ImplementationsTree ImplementationsLinked list ImplementationsHash table + Linked list ImplementationsSetHashSetTreeSetLinkedHashSetListArrayListLinkedListQueueDequeArrayDequeLinkedListMapHashMapTreeMapLinkedHashMapAs you can see from the table, the Java Collections Framework provides several general-purpose implementations of the Set, List , and Map interfaces. In each case, one implementation — HashSet, ArrayList, and HashMap — is clearly the one to use for most applications, all other things being equal. Note that the SortedSet and the SortedMap interfaces do not have rows in the table. Each of those interfaces has one implementation(TreeSet and TreeMap) and is listed in the Set and the Map rows. There are two general-purpose Queue implementations — LinkedList, which is also a List implementation, and PriorityQueue, which is omitted from the table. These two implementations provide very different semantics: LinkedList provides FIFO semantics, while PriorityQueue orders its elements according to their values.Each of the general-purpose implementations provides all optional operations contained in its interface. All permit null elements, keys, and values. None are synchronized (thread-safe). All have fail-fast iterators, which detect illegal concurrent modification during iteration and fail quickly and cleanly rather than risking arbitrary, nondeterministic behavior at an undetermined time in the future. All are Serializable and all support a public clone method.The fact that these implementations are unsynchronized represents a break with the past: The legacy collections Vector and Hashtable are synchronized. The present approach was taken because collections are frequently used when the synchronization is of no benefit. Such uses include single-threaded use, read-only use, and use as part of a larger data object that does its own synchronization. In general, it is good API design practice not to make users pay for a feature they don't use. Furthermore, unnecessary synchronization can result in deadlock under certain circumstances.If you need thread-safe collections, the synchronization wrappers, described in the Wrapper Implementations section, allow any collection to be transformed into a synchronized collection. Thus, synchronization is optional for general-purpose implementations, whereas it is mandatory for legacy implementations. Moreover, the java.util.concurrent package provides concurrent implementations of the BlockingQueue interface, which extends Queue, and of the ConcurrentMap interface, which extends Map. These implementations offer much higher concurrency than mere synchronized implementations.As a rule, you should be thinking about the interfaces, not the implementations. That is why there are no programming examples in this section. For the most part, the choice of implementation affects only performance. The preferred style, as mentioned in the Interfaces section, is to choose an implementation when a Collection is created and to immediately assign the new collection to a variable of the corresponding interface type (or to pass the collection to a method expecting an argument of the interface type). In this way, the program does not become dependent on any added methods in a given implementation, leaving the programmer free to change implementations anytime that it is warranted by performance concerns or behavioral details.The sections that follow briefly discuss the implementations. The performance of the implementations is described using words such as constant-time, log, linear, n log(n), and quadratic to refer to the asymptotic upper-bound on the time complexity of performing the operation. All this is quite a mouthful, and it doesn't matter much if you don't know what it means. If you're interested in knowing more, refer to any good algorithms textbook. One thing to keep in mind is that this sort of performance metric has its limitations. Sometimes, the nominally slower implementation may be faster. When in doubt, measure the performance!« Previous        •        Trail        •        Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Previous Lesson        Next page: Set Implementations     Start SiteCatalyst code  End SiteCatalyst code 
List ImplementationsList implementations are grouped into general-purpose and special-purpose implementations.
General-Purpose List ImplementationsThere are two general-purpose List implementations — ArrayList and LinkedList. Most of the time, you'll probably use ArrayList, which offers constant-time positional access and is just plain fast. It does not have to allocate a node object for each element in the List, and it can take advantage of System.arraycopy when it has to move multiple elements at the same time. Think of ArrayList as Vector without the synchronization overhead.If you frequently add elements to the beginning of the List or iterate over the List to delete elements from its interior, you should consider using LinkedList. These operations require constant-time in a LinkedList and linear-time in an ArrayList. But you pay a big price in performance. Positional access requires linear-time in a LinkedList and constant-time in an ArrayList. Furthermore, the constant factor for LinkedList is much worse. If you think you want to use a LinkedList, measure the performance of your application with both LinkedList and ArrayList before making your choice; ArrayList is usually faster.ArrayList has one tuning parameter — the initial capacity, which refers to the number of elements the ArrayList can hold before it has to grow. LinkedList has no tuning parameters and seven optional operations, one of which is clone. The other six are addFirst, getFirst, removeFirst, addLast, getLast, and removeLast. LinkedList also implements the Queue interface.
Special-Purpose List ImplementationsCopyOnWriteArrayList is a List implementation backed up by a copy-on-write array. This implementation is similar in nature to CopyOnWriteArraySet. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw ConcurrentModificationException. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.If you need synchronization, a Vector will be slightly faster than an ArrayList synchronized with Collections.synchronizedList. But Vector has loads of legacy operations, so be careful to always manipulate the Vector with the List interface or else you won't be able to replace the implementation at a later time.If your List is fixed in size — that is, you'll never use remove, add, or any of the bulk operations other than containsAll — you have a third option that's definitely worth considering. See Arrays.asList in the Convenience Implementations section for more information.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Set Implementations        Next page: Map Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Map ImplementationsMap implementations are grouped into general-purpose, special-purpose, and concurrent implementations.
General-Purpose Map ImplementationsThe three general-purpose Map implementations are HashMap, TreeMap and LinkedHashMap. If you need SortedMap operations or key-ordered Collection-view iteration, use TreeMap; if you want maximum speed and don't care about iteration order, use HashMap; if you want near-HashMap performance and insertion-order iteration, use LinkedHashMap. In this respect, the situation for Map is analogous to Set. Likewise, everything else in the Set Implementations section also applies to Map implementations.LinkedHashMap provides two capabilities that are not available with LinkedHashSet. When you create a LinkedHashMap, you can order it based on key access rather than insertion. In other words, merely looking up the value associated with a key brings that key to the end of the map. Also, LinkedHashMap provides the removeEldestEntry method, which may be overridden to impose a policy for removing stale mappings automatically when new mappings are added to the map. This makes it very easy to implement a custom cache.For example, this override will allow the map to grow up to as many as 100 entries and then it will delete the eldest entry each time a new entry is added, maintaining a steady state of 100 entries.private static final int MAX_ENTRIES = 100;protected boolean removeEldestEntry(Map.Entry eldest) {    return size() > MAX_ENTRIES;}
Special-Purpose Map ImplementationsThere are three special-purpose Map implementations — EnumMap, WeakHashMap and IdentityHashMap. EnumMap, which is internally implemented as an array, is a high-performance Map implementation for use with enum keys. This implementation combines the richness and safety of the Map interface with a speed approaching that of an array. If you want to map an enum to a value, you should always use an EnumMap in preference to an array.WeakHashMap is an implementation of the Map interface that stores only weak references to its keys. Storing only weak references allows a key-value pair to be garbage-collected when its key is no longer referenced outside of the WeakHashMap. This class provides the easiest way to harness the power of weak references. It is useful for implementing "registry-like" data structures, where the utility of an entry vanishes when its key is no longer reachable by any thread.IdentityHashMap is an identity-based Map implementation based on a hash table. This class is useful for topology-preserving object graph transformations, such as serialization or deep-copying. To perform such transformations, you need to maintain an identity-based "node table" that keeps track of which objects have already been seen. Identity-based maps are also used to maintain object-to-meta-information mappings in dynamic debuggers and similar systems. Finally, identity-based maps are useful in thwarting "spoof attacks" that are a result of intentionally perverse equals methods because IdentityHashMap never invokes the equals method on its keys. An added benefit of this implementation is that it is fast.
Concurrent Map ImplementationsThe java.util.concurrent package contains the ConcurrentMap interface, which extends Map with atomic putIfAbsent, remove, and replace methods, and the ConcurrentHashMap implementation of that interface.ConcurrentHashMap is a highly concurrent, high-performance implementation backed up by a hash table. This implementation never blocks when performing retrievals and allows the client to select the concurrency level for updates. It is intended as a drop-in replacement for Hashtable: in addition to implementing ConcurrentMap, it supports all the legacy methods peculiar to Hashtable. Again, if you don't need the legacy operations, be careful to manipulate it with the ConcurrentMap interface.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: List Implementations        Next page: Queue Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Questions and Exercises: Implementations
QuestionsYou plan to write a program that uses several basic collection interfaces: Set, List, Queue, and Map. You're not sure which implementations will work best, so you decide to use general-purpose implementations until you get a better idea how your program will work in the real world. Which implementations are these?If you need a Set implementation that provides value-ordered iteration, which class should you use?Which class do you use to access wrapper implementations?
ExercisesWrite a program that reads a text file, specified by the first command line argument, into a List. The program should then print random lines from the file, the number of lines printed to be specified by the second command line argument. Write the program so that a correctly-sized collection is allocated all at once, instead of being gradually expanded as the file is read in. Hint: To determine the number of lines in the file, use java.io.File.length to obtain the size of the file, then divide by an assumed size of an average line.Check your answers.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Summary of Implementations        Next page: Algorithms     Start SiteCatalyst code  End SiteCatalyst code 
Queue ImplementationsThe Queue implementations are grouped into general-purpose and concurrent implementations.
General-Purpose Queue ImplementationsAs mentioned in the previous section, LinkedList implements the Queue interface, providing first in, first out (FIFO) queue operations for add, poll, and so on.The PriorityQueue class is a priority queue based on the heap data structure. This queue orders elements according to the order specified at construction time, which can be the elements' natural ordering or the ordering imposed by an explicit Comparator.The queue retrieval operations — poll, remove, peek, and element — access the element at the head of the queue. The head of the queue is the least element with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements; ties are broken arbitrarily.PriorityQueue and its iterator implement all of the optional methods of the Collection and Iterator interfaces. The iterator provided in method iterator is not guaranteed to traverse the elements of the PriorityQueue in any particular order. For ordered traversal, consider using Arrays.sort(pq.toArray()).
Concurrent Queue ImplementationsThe java.util.concurrent package contains a set of synchronized Queue interfaces and classes. BlockingQueue extends Queue with operations that wait for the queue to become nonempty when retrieving an element and for space to become available in the queue when storing an element. This interface is implemented by the following classes:LinkedBlockingQueue — an optionally bounded FIFO blocking queue backed by linked nodesArrayBlockingQueue — a bounded FIFO blocking queue backed by an arrayPriorityBlockingQueue — an unbounded blocking priority queue backed by a heapDelayQueue — a time-based scheduling queue backed by a heapSynchronousQueue — a simple rendezvous mechanism that uses the BlockingQueue interfaceIn JDK 7, TransferQueue is a specialized BlockingQueue in which code that adds an element to the queue has the option of waiting (blocking) for code in another thread to retrieve the element. TransferQueue has a single implementation:LinkedTransferQueue — an unbounded TransferQueue based on linked nodes« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Map Implementations        Next page: Deque Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Set ImplementationsThe Set implementations are grouped into general-purpose and special-purpose implementations.
General-Purpose Set ImplementationsThere are three general-purpose Set implementations — HashSet, TreeSet, and LinkedHashSet. Which of these three to use is generally straightforward. HashSet is much faster than TreeSet (constant-time versus log-time for most operations) but offers no ordering guarantees. If you need to use the operations in the SortedSet interface, or if value-ordered iteration is required, use TreeSet; otherwise, use HashSet. It's a fair bet that you'll end up using HashSet most of the time.LinkedHashSet is in some sense intermediate between HashSet and TreeSet. Implemented as a hash table with a linked list running through it, it provides insertion-ordered iteration (least recently inserted to most recently) and runs nearly as fast as HashSet. The LinkedHashSet implementation spares its clients from the unspecified, generally chaotic ordering provided by HashSet without incurring the increased cost associated with TreeSet.One thing worth keeping in mind about HashSet is that iteration is linear in the sum of the number of entries and the number of buckets (the capacity). Thus, choosing an initial capacity that's too high can waste both space and time. On the other hand, choosing an initial capacity that's too low wastes time by copying the data structure each time it's forced to increase its capacity. If you don't specify an initial capacity, the default is 16. In the past, there was some advantage to choosing a prime number as the initial capacity. This is no longer true. Internally, the capacity is always rounded up to a power of two. The initial capacity is specified by using the int constructor. The following line of code allocates a HashSet whose initial capacity is 64.Set<String> s = new HashSet<String>(64);The HashSet class has one other tuning parameter called the load factor. If you care a lot about the space consumption of your HashSet, read the HashSet documentation for more information. Otherwise, just accept the default; it's almost always the right thing to do.If you accept the default load factor but want to specify an initial capacity, pick a number that's about twice the size to which you expect the set to grow. If your guess is way off, you may waste a bit of space, time, or both, but it's unlikely to be a big problem.LinkedHashSet has the same tuning parameters as HashSet, but iteration time is not affected by capacity. TreeSet has no tuning parameters.
Special-Purpose Set ImplementationsThere are two special-purpose Set implementations — EnumSet and CopyOnWriteArraySet.EnumSet is a high-performance Set implementation for enum types. All of the members of an enum set must be of the same enum type. Internally, it is represented by a bit-vector, typically a single long. Enum sets support iteration over ranges of enum types. For example, given the enum declaration for the days of the week, you can iterate over the weekdays. The EnumSet class provides a static factory that makes it easy.    for (Day d : EnumSet.range(Day.MONDAY, Day.FRIDAY))        System.out.println(d);Enum sets also provide a rich, typesafe replacement for traditional bit flags.    EnumSet.of(Style.BOLD, Style.ITALIC)CopyOnWriteArraySet is a Set implementation backed up by a copy-on-write array. All mutative operations, such as add, set, and remove, are implemented by making a new copy of the array; no locking is ever required. Even iteration may safely proceed concurrently with element insertion and deletion. Unlike most Set implementations, the add, remove, and contains methods require time proportional to the size of the set. This implementation is only appropriate for sets that are rarely modified but frequently iterated. It is well suited to maintaining event-handler lists that must prevent duplicates.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Implementations        Next page: List Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Summary of ImplementationsImplementations are the data objects used to store collections, which implement the interfaces described in the Interfaces lesson.The Java Collections Framework provides several general-purpose implementations of the core interfaces:For the Set interface, HashSet is the most commonly used implementation.For the List interface, ArrayList is the most commonly used implementation.For the Map interface, HashMap is the most commonly used implementation.For the Queue interface, LinkedList is the most commonly used implementation.For the Deque interface, ArrayDeque is the most commonly used implementation.Each of the general-purpose implementations provides all optional operations contained in its interface.The Java Collections Framework also provides several special-purpose implementations for situations that require nonstandard performance, usage restrictions, or other unusual behavior.The java.util.concurrent package contains several collections implementations, which are thread-safe but not governed by a single exclusion lock.The Collections class (as opposed to the Collection interface), provides static methods that operate on or return collections, which are known as Wrapper implementations.Finally, there are several Convenience implementations, which can be more efficient than general-purpose implementations when you don't need their full power. The Convenience implementations are made available through static factory methods.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Convenience Implementations        Next page: Questions and Exercises: Implementations     Start SiteCatalyst code  End SiteCatalyst code 
Wrapper ImplementationsWrapper implementations delegate all their real work to a specified collection but add extra functionality on top of what this collection offers. For design pattern fans, this is an example of the decorator pattern. Although it may seem a bit exotic, it's really pretty straightforward.These implementations are anonymous; rather than providing a public class, the library provides a static factory method. All these implementations are found in the Collections class, which consists solely of static methods.
Synchronization WrappersThe synchronization wrappers add automatic synchronization (thread-safety) to an arbitrary collection. Each of the six core collection interfaces — Collection, Set, List, Map, SortedSet, and SortedMap — has one static factory method.public static <T> Collection<T> synchronizedCollection(Collection<T> c);public static <T> Set<T> synchronizedSet(Set<T> s);public static <T> List<T> synchronizedList(List<T> list);public static <K,V> Map<K,V> synchronizedMap(Map<K,V> m);public static <T> SortedSet<T> synchronizedSortedSet(SortedSet<T> s);public static <K,V> SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> m);Each of these methods returns a synchronized (thread-safe) Collection backed up by the specified collection. To guarantee serial access, all access to the backing collection must be accomplished through the returned collection. The easy way to guarantee this is not to keep a reference to the backing collection. Create the synchronized collection with the following trick.List<Type> list = Collections.synchronizedList(new ArrayList<Type>());A collection created in this fashion is every bit as thread-safe as a normally synchronized collection, such as a Vector.In the face of concurrent access, it is imperative that the user manually synchronize on the returned collection when iterating over it. The reason is that iteration is accomplished via multiple calls into the collection, which must be composed into a single atomic operation. The following is the idiom to iterate over a wrapper-synchronized collection.Collection<Type> c = Collections.synchronizedCollection(myCollection);synchronized(c) {    for (Type e : c)        foo(e);}If an explicit iterator is used, the iterator method must be called from within the synchronized block. Failure to follow this advice may result in nondeterministic behavior. The idiom for iterating over a Collection view of a synchronized Map is similar. It is imperative that the user synchronize on the synchronized Map when iterating over any of its Collection views rather than synchronizing on the Collection view itself, as shown in the following example.Map<KeyType, ValType> m = Collections.synchronizedMap(new HashMap<KeyType, ValType>());    ...Set<KeyType> s = m.keySet();    ...// Synchronizing on m, not s!synchronized(m) {    while (KeyType k : s)        foo(k);}One minor downside of using wrapper implementations is that you do not have the ability to execute any noninterface operations of a wrapped implementation. So, for instance, in the preceding List example, you cannot call ArrayList's ensureCapacity operation on the wrapped ArrayList.
Unmodifiable WrappersUnlike synchronization wrappers, which add functionality to the wrapped collection, the unmodifiable wrappers take functionality away. In particular, they take away the ability to modify the collection by intercepting all the operations that would modify the collection and throwing an UnsupportedOperationException. Unmodifiable wrappers have two main uses, as follows:To make a collection immutable once it has been built. In this case, it's good practice not to maintain a reference to the backing collection. This absolutely guarantees immutability.To allow certain clients read-only access to your data structures. You keep a reference to the backing collection but hand out a reference to the wrapper. In this way, clients can look but not modify, while you maintain full access.Like synchronization wrappers, each of the six core Collection interfaces has one static factory method.public static <T> Collection<T> unmodifiableCollection(Collection<? extends T> c);public static <T> Set<T> unmodifiableSet(Set<? extends T> s);public static <T> List<T> unmodifiableList(List<? extends T> list);public static <K,V> Map<K, V> unmodifiableMap(Map<? extends K, ? extends V> m);public static <T> SortedSet<T> unmodifiableSortedSet(SortedSet<? extends T> s);public static <K,V> SortedMap<K, V> unmodifiableSortedMap(SortedMap<K, ? extends V> m);
Checked Interface WrappersThe Collections.checkedinterface wrappers are provided for use with generic collections. These implementations return a dynamically type-safe view of the specified collection, which throws a ClassCastException if a client attempts to add an element of the wrong type. The generics mechanism in the language provides compile-time (static) type-checking, but it is possible to defeat this mechanism. Dynamically type-safe views eliminate this possibility entirely.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Deque Implementations        Next page: Convenience Implementations     Start SiteCatalyst code  End SiteCatalyst code 
API DesignIn this short but important section, you'll learn a few simple guidelines that will allow your API to interoperate seamlessly with all other APIs that follow these guidelines. In essence, these rules define what it takes to be a good "citizen" in the world of collections.
ParametersIf your API contains a method that requires a collection on input, it is of paramount importance that you declare the relevant parameter type to be one of the collection interface types. Never use an implementation type because this defeats the purpose of an interface-based Collections Framework, which is to allow collections to be manipulated without regard to implementation details.Further, you should always use the least-specific type that makes sense. For example, don't require a List or a Set if a Collection would do. It's not that you should never require a List or a Set on input; it is correct to do so if a method depends on a property of one of these interfaces. For example, many of the algorithms provided by the Java platform require a List on input because they depend on the fact that lists are ordered. As a general rule, however, the best types to use on input are the most general: Collection and Map.Caution: Never define your own ad hoc collection class and require objects of this class on input. By doing this, you'd lose all the benefits provided by the Java Collections Framework.
Return ValuesYou can afford to be much more flexible with return values than with input parameters. It's fine to return an object of any type that implements or extends one of the collection interfaces. This can be one of the interfaces or a special-purpose type that extends or implements one of these interfaces.For example, one could imagine an image-processing package, called ImageList, that returned objects of a new class that implements List. In addition to the List operations, ImageList could support any application-specific operations that seemed desirable. For example, it might provide an indexImage operation that returned an image containing thumbnail images of each graphic in the ImageList. It's critical to note that even if the API furnishes ImageList instances on output, it should accept arbitrary Collection (or perhaps List) instances on input.In one sense, return values should have the opposite behavior of input parameters: It's best to return the most specific applicable collection interface rather than the most general. For example, if you're sure that you'll always return a SortedMap, you should give the relevant method the return type of SortedMap rather than Map. SortedMap instances are more time-consuming to build than ordinary Map instances and are also more powerful. Given that your module has already invested the time to build a SortedMap, it makes good sense to give the user access to its increased power. Furthermore, the user will be able to pass the returned object to methods that demand a SortedMap, as well as those that accept any Map.
Legacy APIsThere are currently plenty of APIs out there that define their own ad hoc collection types. While this is unfortunate, it's a fact of life, given that there was no Collections Framework in the first two major releases of the Java platform. Suppose you own one of these APIs; here's what you can do about it.If possible, retrofit your legacy collection type to implement one of the standard collection interfaces. Then all the collections you return will interoperate smoothly with other collection-based APIs. If this is impossible (for example, because one or more of the preexisting type signatures conflict with the standard collection interfaces), define an adapter class that wraps one of your legacy collections objects, allowing it to function as a standard collection. (The Adapter class is an example of a custom implementation.)Retrofit your API with new calls that follow the input guidelines to accept objects of a standard collection interface, if possible. Such calls can coexist with the calls that take the legacy collection type. If this is impossible, provide a constructor or static factory for your legacy type that takes an object of one of the standard interfaces and returns a legacy collection containing the same elements (or mappings). Either of these approaches will allow users to pass arbitrary collections into your API.« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Compatibility        Next page: End of Trail     Start SiteCatalyst code  End SiteCatalyst code 
CompatibilityThe Java Collections Framework was designed to ensure complete interoperability between the core collection interfaces and the types that were used to represent collections in the early versions of the Java platform: Vector, Hashtable, array, and Enumeration. In this section, you'll learn how to transform old collections to the Java Collections Framework collections and vice versa.
Upward CompatibilitySuppose that you're using an API that returns legacy collections in tandem with another API that requires objects implementing the collection interfaces. To make the two APIs interoperate smoothly, you'll have to transform the legacy collections into modern collections. Luckily, the Java Collections Framework makes this easy.Suppose the old API returns an array of objects and the new API requires a Collection. The Collections Framework has a convenience implementation that allows an array of objects to be viewed as a List. You use Arrays.asList to pass an array to any method requiring a Collection or a List.Foo[] result = oldMethod(arg);newMethod(Arrays.asList(result));If the old API returns a Vector or a Hashtable, you have no work to do at all because Vector was retrofitted to implement the List interface, and Hashtable was retrofitted to implement Map. Therefore, a Vector may be passed directly to any method calling for a Collection or a List.Vector result = oldMethod(arg);newMethod(result);Similarly, a Hashtable may be passed directly to any method calling for a Map.Hashtable result = oldMethod(arg);newMethod(result);Less frequently, an API may return an Enumeration that represents a collection of objects. The Collections.list method translates an Enumeration into a Collection.Enumeration e = oldMethod(arg);newMethod(Collections.list(e));
Backward CompatibilitySuppose you're using an API that returns modern collections in tandem with another API that requires you to pass in legacy collections. To make the two APIs interoperate smoothly, you have to transform modern collections into old collections. Again, the Java Collections Framework makes this easy.Suppose the new API returns a Collection, and the old API requires an array of Object. As you're probably aware, the Collection interface contains a toArray method designed expressly for this situation.Collection c = newMethod();oldMethod(c.toArray());What if the old API requires an array of String (or another type) instead of an array of Object? You just use the other form of toArray — the one that takes an array on input.Collection c = newMethod();oldMethod((String[]) c.toArray(new String[0]));If the old API requires a Vector, the standard collection constructor comes in handy.Collection c = newMethod();oldMethod(new Vector(c));The case where the old API requires a Hashtable is handled analogously.Map m = newMethod();oldMethod(new Hashtable(m));Finally, what do you do if the old API requires an Enumeration? This case isn't common, but it does happen from time to time, and the Collections.enumeration method was provided to handle it. This is a static factory method that takes a Collection and returns an Enumeration over the elements of the Collection.Collection c = newMethod();oldMethod(Collections.enumeration(c));« Previous            •            Trail            •            Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Interoperability        Next page: API Design     Start SiteCatalyst code  End SiteCatalyst code 
Lesson: Introduction to CollectionsA collection — sometimes called a container — is simply an object that groups multiple elements into a single unit. Collections are used to store, retrieve, manipulate, and communicate aggregate data. Typically, they represent data items that form a natural group, such as a poker hand (a collection of cards), a mail folder (a collection of letters), or a telephone directory (a mapping of names to phone numbers). If you have used the Java programming language — or just about any other programming language — you are already familiar with collections.
What Is a Collections Framework?A collections framework is a unified architecture for representing and manipulating collections. All collections frameworks contain the following:Interfaces: These are abstract data types that represent collections. Interfaces allow collections to be manipulated independently of the details of their representation. In object-oriented languages, interfaces generally form a hierarchy.Implementations: These are the concrete implementations of the collection interfaces. In essence, they are reusable data structures.Algorithms: These are the methods that perform useful computations, such as searching and sorting, on objects that implement collection interfaces. The algorithms are said to be polymorphic: that is, the same method can be used on many different implementations of the appropriate collection interface. In essence, algorithms are reusable functionality.Apart from the Java Collections Framework, the best-known examples of collections frameworks are the C++ Standard Template Library (STL) and Smalltalk's collection hierarchy. Historically, collections frameworks have been quite complex, which gave them a reputation for having a steep learning curve. We believe that the Java Collections Framework breaks with this tradition, as you will learn for yourself in this chapter.
Benefits of the Java Collections FrameworkThe Java Collections Framework provides the following benefits:Reduces programming effort: By providing useful data structures and algorithms, the Collections Framework frees you to concentrate on the important parts of your program rather than on the low-level "plumbing" required to make it work. By facilitating interoperability among unrelated APIs, the Java Collections Framework frees you from writing adapter objects or conversion code to connect APIs.Increases program speed and quality: This Collections Framework provides high-performance, high-quality implementations of useful data structures and algorithms. The various implementations of each interface are interchangeable, so programs can be easily tuned by switching collection implementations. Because you're freed from the drudgery of writing your own data structures, you'll have more time to devote to improving programs' quality and performance.Allows interoperability among unrelated APIs: The collection interfaces are the vernacular by which APIs pass collections back and forth. If my network administration API furnishes a collection of node names and if your GUI toolkit expects a collection of column headings, our APIs will interoperate seamlessly, even though they were written independently.Reduces effort to learn and to use new APIs: Many APIs naturally take collections on input and furnish them as output. In the past, each such API had a small sub-API devoted to manipulating its collections. There was little consistency among these ad hoc collections sub-APIs, so you had to learn each one from scratch, and it was easy to make mistakes when using them. With the advent of standard collection interfaces, the problem went away.Reduces effort to design new APIs: This is the flip side of the previous advantage. Designers and implementers don't have to reinvent the wheel each time they create an API that relies on collections; instead, they can use standard collection interfaces.Fosters software reuse: New data structures that conform to the standard collection interfaces are by nature reusable. The same goes for new algorithms that operate on objects that implement these interfaces.« Previous        •        Trail        •        Next »Your use of this page and all the material on pages under "The Java Tutorials" banner          is subject to these legal notices.         Copyright © 1995, 2015 Oracle and/or its affiliates. All rights reserved.Problems with the examples? Try Compiling and Running        the Examples: FAQs.                Complaints? Compliments? Suggestions? Give        us your feedback.               Previous page: Table of Contents        Next page: Interfaces     Start SiteCatalyst code  End SiteCatalyst code 